#!/usr/bin/env python3

import os, yaml, subprocess

def run(*cmd):
    print("+ " + " ".join(cmd))
    subprocess.check_call(cmd)

class NetNS:

    def __init__(self, name):
        self.source = "/proc/{}/ns/net".format(
            int(subprocess.check_output(("docker", "inspect", "-f", "{{.State.Pid}}", name)).strip()))
        self.target = "/var/run/netns/{}".format(name)

    def setup(self):
        if not os.path.exists(os.path.dirname(self.target)):
            os.makedirs(os.path.dirname(self.target))
        self.teardown()
        os.symlink(self.source, self.target)

    def teardown(self):
        if os.path.islink(self.target):
            os.unlink(self.target)

eth0 = subprocess.check_output(("ip", "addr", "list", "eth0")).decode("ascii").splitlines()
addr = [line for line in eth0 if "inet " in line][0].replace("/", " ").split()[1]
port = 8080
url  = "http://{}:{}/mutate".format(addr, port)

links = yaml.load(open("topology.yaml"))
nodes = set()
for link in links:
    nodes.update(link)
nodes = sorted(nodes)

run("docker", "run", "-dit", "-p={}:{}:{}".format(addr, port, port), "--name", "kriek", "kriek")

for node in nodes:
    run("docker", "run", "-dit", "--name", node, "--cap-add=NET_ADMIN", "lsoed")

namespaces = tuple(NetNS(node) for node in nodes)

for ns in namespaces:
    ns.setup()

for node1, node2 in links:
    run("ip", "link", "add", node1 + node2, "type", "veth", "peer", "name", node2 + node1)
    run("ip", "link", "set", node1 + node2, "up",   "netns", node1, "name", node2)
    run("ip", "link", "set", node2 + node1, "up",   "netns", node2, "name", node1)

for node in nodes:
    run("docker", "exec", "-it", node, "/app/configure", "--name", node, "--url", url)

for ns in namespaces:
    ns.teardown()
